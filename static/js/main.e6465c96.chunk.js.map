{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","plant","latinname","alt","src","foto","name","align","tekst","margin-top","size","color","herkomst","datum","water","id","Cardlist","planten","map","key","App","state","searchField","fetch","then","response","json","users","setState","this","filteredPlanten","filter","toLowerCase","includes","href","padding-left","type","placeholder","onChange","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8TAWaA,EAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,aAAaD,EAAME,MAAMC,YAE3C,6BACI,yBACIC,IAAI,QACJC,IAAKL,EAAME,MAAMI,KACjBL,UAAU,iBAGlB,yBAAKA,UAAU,SACX,4BAAKD,EAAME,MAAMK,MACjB,wBAAIC,MAAM,OAAOP,UAAU,SAC3B,uBAAGA,UAAU,aAAaD,EAAME,MAAMO,OACtC,yBAAKR,UAAU,QACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,QAAO,kBAAC,IAAD,CAAgBS,aAAW,MAAMC,KAAM,GAAIC,MAAM,aACvE,yBAAKX,UAAU,QAAO,2BAAID,EAAME,MAAMW,YAE1C,yBAAKZ,UAAU,kBACX,yBAAKA,UAAU,QAAO,kBAAC,IAAD,CAAYU,KAAM,GAAIC,MAAM,aAClD,yBAAKX,UAAU,QAAO,2BAAID,EAAME,MAAMY,UAG9C,yBAAKb,UAAU,YACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,QAAO,kBAAC,IAAD,CAAaU,KAAM,GAAIC,MAAM,aACnD,yBAAKX,UAAU,QAAO,2BAAID,EAAME,MAAMa,UAG9C,yBAAKd,UAAU,mBACX,yBACIG,IAAI,QACJC,IAAI,iFACJJ,UAAU,qBAEd,yBACIG,IAAI,QACJC,IAAI,wFACJJ,UAAU,uBAGlB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,eAAc,kBAAC,IAAD,CAAaU,KAAM,MAChD,yBAAKV,UAAU,eAAc,kBAAC,IAAD,CAAcU,KAAM,MACjD,yBAAKV,UAAU,eAAc,uCAAaD,EAAME,MAAMc,UCvD7DC,G,MAAW,SAAAjB,GAAK,OAC7B,yBAAKC,UAAU,aACVD,EAAMkB,QAAQC,KAAI,SAAAjB,GAAK,OACpB,kBAAC,EAAD,CAAMkB,IAAKlB,EAAMc,GAAId,MAAOA,U,eC4CrBmB,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXJ,QAAS,GACTK,YAAa,IALH,E,gEASO,IAAD,OAClBC,MAAM,yEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACX,QAASU,S,+BAG/B,IAAD,SAC0BE,KAAKR,MAA9BJ,EADD,EACCA,QAASK,EADV,EACUA,YACXQ,EAAkBb,EAAQc,QAAO,SAAA9B,GAAK,OAC1CA,EAAMK,KAAK0B,cAAcC,SAASX,EAAYU,kBAGhD,OACA,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,UACb,4BACE,4BAAI,uBAAGA,UAAU,OAAOkC,KAAK,gBAAzB,SACJ,wBAAIlC,UAAU,QAAO,kBAAC,IAAD,CAAYU,KAAM,MACvC,wBAAIV,UAAU,UAAS,kBAAC,IAAD,CAAiBU,KAAM,GAAIyB,eAAa,UAC/D,4BACF,2BACEC,KAAK,SACLC,YAAY,iBACZC,SAAW,SAAAC,GAAC,OAAI,EAAKX,SAAS,CAAEN,YAAaiB,EAAEC,OAAOC,cAI1D,kBAAC,EAAD,CAAUxB,QAASa,S,GArCPY,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e6465c96.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\n// Icons\nimport { BsArrowLeft } from 'react-icons/bs';\nimport { BsArrowRight } from 'react-icons/bs';\nimport { GiEarthAmerica } from 'react-icons/gi';\nimport { GiWaterDrop } from 'react-icons/gi';\nimport { BsCalendar } from 'react-icons/bs';\n\n\nexport const Card = props => (\n    <div className='flex-container'>\n        <div className=\"left\"> \n            <h3 className=\"latinname\">{props.plant.latinname}</h3>\n        </div>\n        <div>\n            <img\n                alt='plant'\n                src={props.plant.foto}\n                className='plant-image'\n            />\n        </div>\n        <div className=\"right\">\n            <h2>{props.plant.name}</h2>\n            <hr align=\"left\" className=\"lijn\"></hr>\n            <p className=\"inleiding\">{props.plant.tekst}</p>\n            <div className=\"info\">\n                <div className=\"icon-row\">\n                    <div className=\"icon-container\">\n                        <div className=\"icon\"><GiEarthAmerica margin-top='5vw' size={18} color='#2b2b2b' /></div>\n                        <div className=\"text\"><p>{props.plant.herkomst}</p></div>\n                    </div>\n                    <div className=\"icon-container\">\n                        <div className=\"icon\"><BsCalendar size={18} color='#2b2b2b' /></div>\n                        <div className=\"text\"><p>{props.plant.datum}</p></div>\n                    </div>\n                </div>\n                <div className=\"icon-row\">\n                    <div className=\"icon-container\">\n                        <div className=\"icon\"><GiWaterDrop size={18} color='#2b2b2b' /></div>\n                        <div className=\"text\"><p>{props.plant.water}</p></div>\n                    </div>\n                </div>\n                <div className=\"image-container\">\n                    <img \n                        alt='plant'\n                        src='https://luukvanettinger.github.io/plantenData/images/nestvaren_horizontal2.jpg'\n                        className='image-horizontal'\n                    />\n                    <img \n                        alt='plant'\n                        src='https://luukvanettinger.github.io/plantenData/images/pannenkoekenplant_horizontal.jpg'\n                        className='image-horizontal2'\n                    />\n                </div>\n                <div className=\"infofooter\">\n                    <div className=\"icon-arrow1\"><BsArrowLeft size={27} /></div>\n                    <div className=\"icon-arrow2\"><BsArrowRight size={27} /></div>        \n                    <div className=\"plantnumber\"><h4>______ 0{props.plant.id}</h4></div>      \n                </div>\n            </div>\n        </div>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const Cardlist = props => (\n<div className='card-list'>\n    {props.planten.map(plant => (\n        <Card key={plant.id} plant={plant} />\n        ))}\n</div>\n);","import React, { Component } from 'react';\nimport { Cardlist } from './components/card-list/card-list.component';\nimport './App.css';\n\n// Icons\nimport { HiOutlineSearch } from 'react-icons/hi';\nimport { HiMenuAlt4 } from 'react-icons/hi';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      planten: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://my-json-server.typicode.com/luukvanettinger/plantenData/users')\n    .then(response => response.json())\n    .then(users => this.setState({planten: users }));\n  }\n\n  render() {\n    const { planten, searchField } = this.state;\n    const filteredPlanten = planten.filter(plant =>\n      plant.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return(\n    <div className=\"App\">\n      <div className=\"navbar\">\n        <ul>\n          <li><a className=\"logo\" href=\"./index.html\">luuk</a></li>\n          <li className=\"menu\"><HiMenuAlt4 size={26} /></li>\n          <li className=\"search\"><HiOutlineSearch size={21} padding-left='-5vw' /></li>\n          <li>\n        <input \n          type='search' \n          placeholder='search planten' \n          onChange={ e => this.setState({ searchField: e.target.value }) } \n        /></li>\n        </ul>\n      </div>\n      <Cardlist planten={filteredPlanten} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}